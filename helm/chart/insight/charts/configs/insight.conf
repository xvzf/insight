input {
    http {
      id => "flows"
      port => 8080
      codec => "json"
      tags => ["flow"]
    }
}

filter {

  # Remove http fields
  mutate {
    remove_field => ["headers"]
  }

  # Check if the flow is targeting a clusterIP by doing a memcached lookup
  memcached {
    id => "clusterip_lookup"
    hosts => ["insight-memcached"]
    get => {
      "%{[network][community_id]}" => "[@metadata][raw_clusterip_lookup]"
    }
    add_field => {
      "[destination][orig_ip]" => "%{[destination][ip]}"
      "[destination][orig_port]" => "%{[destination][port]}"
      "[network][orig_community_id]" => "%{[network][community_id]}"
    }
    add_tag => [ "dst_is_clusterip" ]
  }

  if "dst_is_clusterip" in [tags] {
    # Parse JSON
    json {
      id => "parse_clusterip_lookup"
      source => "[@metadata][raw_clusterip_lookup]"
      target => "[@metadata][clusterip_lookup]"
    }

    # Replace fields
    mutate {
      replace => {
        "[network][community_id]" => "%{[@metadata][clusterip_lookup][community_id]}"
        "[destination][ip]" => "%{[@metadata][clusterip_lookup][replace_ip]}"
        "[destination][port]" => "%{[@metadata][clusterip_lookup][replace_port]}"
      }
    }
  }

  jdbc_streaming {
    id => "metadata_for_src_ip"
    # Connection details
    jdbc_driver_library => "/usr/share/extras/jdbc/postgresql-42.2.9.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://insight-kubestatestore-postgresql:5432/insight?user=insight"

    # Cache up to 512 entries for 0.5s as there is likely more than one flow per IP and we don't want a query
    # for every incoming packet. (due to possible performance/bandwidth limitations)
    cache_expiration => 0.5
    cache_size => 512
    use_cache => true

    # Queries metadata from the kubernetes state store
    statement => "
      select
          json_build_object(
              'pods', coalesce(json_agg(pod_metadata) filter (where pod_metadata is not null), '[]')
              , 'services', coalesce(json_agg(service_metadata) filter (where service_metadata is not null), '[]')
          ) #>> '{}' as metadata
      from
          ((select
                  p.definition #> '{metadata}' as pod_metadata
                  , null as service_metadata
              from pods p
              where p.definition #> '{\"status\", \"podIPs\"}' @> ?::jsonb
              )
          union
              (select
                  null as pod_metadata,
                  s.definition #> '{metadata}' as service_metadata
              from services s
                  join endpoints e on (s.name, s.namespace) = (e.name, e.namespace)
              where e.definition -> 'subsets' @> ?::jsonb
          )) as m
    "

    use_prepared_statements => true
    prepared_statement_name => "metadata_for_src_ip"
    target => "[@metadata][jdbc_results][metadata_for_src_ip]"
    prepared_statement_bind_values => [ "[{\"ip\": \"%{[source][ip]}\"}]", "[{\"addresses\": [{\"ip\": \"%{[source][ip]}\"}]}]" ]
  }

  jdbc_streaming {
    id => "metadata_for_dst_ip"
    jdbc_driver_library => "/usr/share/extras/jdbc/postgresql-42.2.9.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://insight-kubestatestore-postgresql:5432/insight?user=insight"
    cache_expiration => 0.5
    cache_size => 512
    use_cache => true
    statement => "
      select
          json_build_object(
              'pods', coalesce(json_agg(pod_metadata) filter (where pod_metadata is not null), '[]')
              , 'services', coalesce(json_agg(service_metadata) filter (where service_metadata is not null), '[]')
          ) #>> '{}' as metadata
      from
          ((select
                  p.definition #> '{metadata}' as pod_metadata
                  , null as service_metadata
              from pods p
              where p.definition #> '{\"status\", \"podIPs\"}' @> ?::jsonb
              )
          union
              (select
                  null as pod_metadata,
                  s.definition #> '{metadata}' as service_metadata
              from services s
                  join endpoints e on (s.name, s.namespace) = (e.name, e.namespace)
              where e.definition -> 'subsets' @> ?::jsonb
          )) as m
    " 
    use_prepared_statements => true
    prepared_statement_name => "metadata_for_dst_ip"
    target => "[@metadata][jdbc_results][metadata_for_dst_ip]"
    prepared_statement_bind_values => [ "[{\"ip\": \"%{[destination][ip]}\"}]", "[{\"addresses\": [{\"ip\": \"%{[destination][ip]}\"}]}]" ]
  }

  # jsonb type is not supported by jdbc (-> logstash) therefore json is passed as string and parsed back to json by logstash
  json {
    id => "parse_metadata_for_src_ip"
    source => "[@metadata][jdbc_results][metadata_for_src_ip][0][metadata]"
    target => "[source][kubernetes][metadata]"
  }
  json {
    id => "parse_metadata_for_dst_ip"
    source => "[@metadata][jdbc_results][metadata_for_dst_ip][0][metadata]"
    target => "[destination][kubernetes][metadata]"
  }

  # Extract first pod for easy querying using KQL
  # ruby {
  #   id => "make_kubernetes_metadata_searchable"
  #   path => "/usr/share/logstash/insight/extract_first_array_element.rb"
  # }

  # GeoIP lookup
  geoip {
    id => "geoip_lookup_for_src_ip"
    source => "[source][ip]"
    target => "[source][geo]"
    fields => ["CITY_NAME", "COUNTRY_NAME", "LOCATION", "AUTONOMOUS_SYSTEM_NUMBER", "AUTONOMOUS_SYSTEM_ORGANIZATION"]
  }
  geoip {
    id => "geoip_lookup_for_dst_ip"
    source => "[destination][ip]"
    target => "[destination][geo]"
    fields => ["IP", "CITY_NAME", "COUNTRY_NAME", "LOCATION", "AUTONOMOUS_SYSTEM_NUMBER", "AUTONOMOUS_SYSTEM_ORGANIZATION"]
  }

  # Update AS values
  # @TODO
}

output {
  elasticsearch {
    hosts => ["elasticsearch-master"]
    index => "insight-1.0.0-%{+YYYY.MM.dd}"
    manage_template => true
    ilm_enabled => false
    template => "/usr/share/logstash/insight/insight.template.json"
    template_name => "insight-1.0.0"
    template_overwrite => true
    action => "index"
  }
}
